===== Week 4 =====

8/10/2020

I created a function, 'watermark.py' which lays a semi-transparent watermark over an inputted image,
which will be sourced from the postgres database. I have yet to test this function, given that this is supposed
to be part of the discovery functionality of the web app.
UPDATE:
I revised the watermark.py file this afternoon after some testing, and finally got it to behave correctly;
the 'apply_watermark' function takes in a filename of the base image as an input, and creates a semi-transparent image which serves
as the watermark which is then applied over the original image. The composite image is then saved, creating a watermarked version of
the original photograph.
I still need to find a way to integrate this functionality into the original user discovery method.

9/10/2020

I was finally able to integrate the watermark function properly into the discovery method of app.py after much difficulty. The
watermark function now takes in an image file generated from the byte data from the database sql entry, applies the watermark and returns
a bytesIO object of the resultant file. The bytesIO object is then encoded and processed as a part of the request data for the
search results at the frontend.

10/10/2020

I began work on the 'Edit Post' user story, which entails a user's ability to edit the caption, tags and/or price of their photos/posts.
Since our current database only stores the user id, image id and caption of a photo, my edit post function within the api only updates
the 'caption' column of the table.
UPDATE:
After testing and tweaking, the edit post function works correctly, with the caption text changed to the text inputted into the
function. It however has a quirk of changing the order of entries within the table, with the affected entry being set as the last entry.

11/10/2020

I attempted to implement the React side of the 'Edit Post' function, creating a rudimentary web page consisting of an input field and a
button, which would then change the caption of a specified image in the database. However, we have yet to implement a method in which to
extract the image_id from the post which we want to edit, so for the time being, I had to hardcode the image_id parameter in the
async function for testing purposes

===== Week 5 =====

14/10/2020
I revised my edit post function, enabling it to now also edit the title and price of a specified photograph. This was in light
of the tables now including the aforementioned attributes as new columns.

18/10/2020
I modified my edit post functions to now also update the columns 'price' and 'title' within the tables, although these added
functionalities have yet to be tested

===== Week 6 =====

19/10/2020
I started the notifications user story of the web app, which is supposed to return notifications for a logged user such
as comments or likes on any of their posted photos. However, I am having a hard time trying to figure out how to implement this.
For know, I've created a separate file related to this user story.

21/10/2020
I modified the comments and likes tables to include a timestamp which should record the time that a like/comment was posted on
any image. I also included a timestamp in the users table which records the time of the last activity that a logged on user has
performed. These changes were essential for the notifications functionality.

22/10/2020
I added some additional views to the database that should help with the notifications functionality, pulling from the likes and
comments tables. Also revised my functions which have not been tested yet.
UPDATE
I tested and revised my functions, so that they now returned the proper array of tuples
UPDATE
I added api call functions to the notifications functions, but have yet to test if these work

23/10/2020
I tested the api call, and tweaked the function so that it now sorts notifications from most recent to least recent after
the determined timestamp.

===== Week 7 =====

1/11/2020
I began implementing a tag search function, which searches the database for images based on a single tag. I first tested the
sql query it used, which works. Have yet to implement an api call for it.
UPDATE
I modified the discovery api call to now execute a search by tag first, then search by term if the first search doesn't return enough
results.

7/11/2020
After the demo this week, I modified the api call a bit more, since some errors with the code occurred prior to the demo. Some of this
code is messy and redundant however, and I need to refactor some of it.