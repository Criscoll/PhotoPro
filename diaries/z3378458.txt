===== Week 4 =====

10/10/2020

I created a function, 'delete_image_post' in general_user.py to implement the
database backend side of deleting user posts. Some strange behaviour by my dev
enviroment led to the images table in the database being deleted. The function
which takes image_id as an argument does not seem to recieve the image_id
correctly from the function argument and when you
manually insert the integer post id to delete, it works. The test file i wrote
is simply opening a connection and calling the function with a predefine value,
but for some reason the argument is not being passed properly and is the value
10 regardless of what, value the function is called with. I will instal windows
and the linux subsystem on my computer rather than continuning to use Macosx as
this strange behabiour may be solved. I do belive though that the function is
correct, and hence was pushed to my branch db-functions.
UPDATE:
It seems that differences in carriage return on mac caused the second line of
the sql query specifing the entry to be deleted was not parsed properly causing
all entries in the images table to be deleted. When run on ubuntu
this problem is not encountered




===== Week 5 =====


16/10/2020
Today we had out first demo, progressive demo A.
Everything functioned as expected and went smoothly. This week I responded to
other team memebrs queires and tried to assist where possible, and also
performed further testing on the delete_post function I finished last week.
I haven't been able to do as much work on the project this week as I have had a
combined 35% of assement in my other subjects this past week. I'm keen to get
back to work on it next week. I have the tag functions in mind which are a story
in the next sprint
{talk about making sure no errors in delete_post function but manioly doing work
for other subjeccts}

===== Week 6 =====
21/10/2020
Today Matt and I assisted ethan with the backend design of the notificaitons
system. The main to issues to solve were how to store the notifications, and how
to generate them. Ethan originally had thought to have a system where the
backend polled the database for changes and presented them to the user when
the polling detected them. I thought this was complex and conmsumed too much CPU
and that it was better to have an event driven system where when changes were
made to state on the system such as posts, pruchases and likes that the users
concerned be notified by generating a notification to be stored in a
notification table, effectively following an observer design pattern. Matt
thought of a simpler approach which was to just record the last time active of
each user and then on a new page refresh or login, query all the tables to
gather all activity since the last active recorded time that would form the
notifications for that user. For example if user was last active at 7:43pm and
then someone liked on of their photos, that like would be recoreded with a time
stamp in the likes table. On refresh at 7:45pm the like table would be querired
and found that the like had taken place since last active so would be prpesented
as a notification for that user. As i rightly pointed out this fast become
ineffecient for a growing number of users as multiple tables such as likes,
purhases uploads and more are queried each refresh for every user, instead of
just generated notifcaions at time of mofication to store in a notifications
table, however Matts solution was easier to implement and we do not anticipate
millions of users, so the easier to implement architecture is fine for our
purposes.



