{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/COMP3900_PhotoPro/capstone-project-comp3900-f11a-2mjec/photopro-app/src/components/feed/feed.jsx\";\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './feed.css';\nimport axios from 'axios';\nimport ImageCard from './ImageCard/ImageCard';\nimport BookmarkModal from '../modal/BookmarkModal';\n\nconst Feed = props => {\n  const [imgs, setImgs] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [photoIdBookmarked, setPhotoIdBookmarked] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const fetchIsCancelled = useRef(false);\n  const observer = useRef();\n  const lastImageRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        fetchImages(props.query);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, hasMore, props.query]);\n  useEffect(() => {\n    fetchImages(props.query);\n    return () => {\n      console.log('clean up is being run');\n      fetchIsCancelled.current = true;\n      setImgs([]);\n      setHasMore(false);\n    };\n  }, [props.query]);\n\n  const fetchImages = term => {\n    setLoading(true);\n    axios({\n      method: 'GET',\n      url: 'http://localhost:5000/discovery',\n      params: {\n        query: term,\n        batch_size: 10\n      } //user_id: 1\n\n    }).then(res => {\n      console.log(res);\n\n      if (res.data.result !== false && !fetchIsCancelled.current) {\n        setHasMore(true);\n        setTimeout(() => {\n          setLoading(false);\n          setImgs(prevImgs => {\n            return [...prevImgs, ...res.data.result];\n          });\n        }, 500);\n      } else if (!fetchIsCancelled.current) {\n        console.log('no more images to return');\n        setLoading(false);\n        setHasMore(false); // setImgs((prevImgs) => {\n        //   return [...prevImgs];\n        // });\n      }\n    });\n  }; // console.log(`LENGTH = ${imgs.length}`);\n  // console.log(`HASMORE = ${hasMore}`);\n  // console.log(`LOADING = ${loading}`);\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Found Images: \", imgs.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, imgs.map((image, index) => {\n    if (image === null) {\n      return null;\n    }\n\n    if (imgs.length === index + 1) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ImageCard, {\n        key: image.id,\n        image: image,\n        setOpenBookmarkModal: setModalIsOpen,\n        setPhotoId: setPhotoIdBookmarked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        ref: lastImageRef,\n        style: {\n          position: 'relative',\n          bottom: '200px',\n          // border: '3px solid red',\n          height: '0%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(ImageCard, {\n        key: image.id,\n        image: image,\n        setOpenBookmarkModal: setModalIsOpen,\n        setPhotoId: setPhotoIdBookmarked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }\n      });\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, loading && 'Loading...'), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, !hasMore && 'No more images to display'), modalIsOpen ? /*#__PURE__*/React.createElement(BookmarkModal, {\n    openModal: true,\n    setOpenModal: setModalIsOpen,\n    photoId: photoIdBookmarked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }) : null);\n};\n\nexport default Feed;","map":{"version":3,"sources":["/home/cristian/Documents/projects/COMP3900_PhotoPro/capstone-project-comp3900-f11a-2mjec/photopro-app/src/components/feed/feed.jsx"],"names":["React","useState","useEffect","useRef","useCallback","axios","ImageCard","BookmarkModal","Feed","props","imgs","setImgs","modalIsOpen","setModalIsOpen","photoIdBookmarked","setPhotoIdBookmarked","hasMore","setHasMore","loading","setLoading","fetchIsCancelled","observer","lastImageRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","fetchImages","query","observe","console","log","term","method","url","params","batch_size","then","res","data","result","setTimeout","prevImgs","length","map","image","index","id","position","bottom","height","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './feed.css';\nimport axios from 'axios';\nimport ImageCard from './ImageCard/ImageCard';\nimport BookmarkModal from '../modal/BookmarkModal';\n\nconst Feed = (props) => {\n  const [imgs, setImgs] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [photoIdBookmarked, setPhotoIdBookmarked] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  const fetchIsCancelled = useRef(false);\n  const observer = useRef();\n  const lastImageRef = useCallback(\n    (node) => {\n      if (loading) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && hasMore) {\n          fetchImages(props.query);\n        }\n      });\n\n      if (node) observer.current.observe(node);\n    },\n    [loading, hasMore, props.query]\n  );\n\n  useEffect(() => {\n    fetchImages(props.query);\n\n    return () => {\n      console.log('clean up is being run');\n      fetchIsCancelled.current = true;\n      setImgs([]);\n      setHasMore(false);\n    };\n  }, [props.query]);\n\n  const fetchImages = (term) => {\n    setLoading(true);\n    axios({\n      method: 'GET',\n      url: 'http://localhost:5000/discovery',\n      params: { query: term, batch_size: 10 }, //user_id: 1\n    }).then((res) => {\n      console.log(res);\n      if (res.data.result !== false && !fetchIsCancelled.current) {\n        setHasMore(true);\n        setTimeout(() => {\n          setLoading(false);\n          setImgs((prevImgs) => {\n            return [...prevImgs, ...res.data.result];\n          });\n        }, 500);\n      } else if (!fetchIsCancelled.current) {\n        console.log('no more images to return');\n        setLoading(false);\n        setHasMore(false);\n        // setImgs((prevImgs) => {\n        //   return [...prevImgs];\n        // });\n      }\n    });\n  };\n\n  // console.log(`LENGTH = ${imgs.length}`);\n  // console.log(`HASMORE = ${hasMore}`);\n  // console.log(`LOADING = ${loading}`);\n\n  return (\n    <React.Fragment>\n      <h2>Found Images: {imgs.length}</h2>\n\n      <div className=\"image-grid\">\n        {imgs.map((image, index) => {\n          if (image === null) {\n            return null;\n          }\n\n          if (imgs.length === index + 1) {\n            return (\n              <React.Fragment key={index}>\n                <ImageCard\n                  key={image.id}\n                  image={image}\n                  setOpenBookmarkModal={setModalIsOpen}\n                  setPhotoId={setPhotoIdBookmarked}\n                />\n                <div\n                  key={index}\n                  ref={lastImageRef}\n                  style={{\n                    position: 'relative',\n                    bottom: '200px',\n                    // border: '3px solid red',\n                    height: '0%',\n                  }}\n                ></div>\n              </React.Fragment>\n            );\n          } else {\n            return (\n              <ImageCard\n                key={image.id}\n                image={image}\n                setOpenBookmarkModal={setModalIsOpen}\n                setPhotoId={setPhotoIdBookmarked}\n              />\n            );\n          }\n        })}\n      </div>\n      <h2 style={{ textAlign: 'center' }}>{loading && 'Loading...'}</h2>\n      <h2 style={{ textAlign: 'center' }}>\n        {!hasMore && 'No more images to display'}\n      </h2>\n\n      {modalIsOpen ? (\n        <BookmarkModal\n          openModal={true}\n          setOpenModal={setModalIsOpen}\n          photoId={photoIdBookmarked}\n        ></BookmarkModal>\n      ) : null}\n    </React.Fragment>\n  );\n};\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}