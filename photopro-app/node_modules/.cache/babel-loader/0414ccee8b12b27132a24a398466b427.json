{"ast":null,"code":"// import ReactDom from 'react-dom';\n// export default function PhotoModal(\n//   { openModal, setOpenModal, photoId },\n//   props\n// ) {\n//   const [comments, setComments] = useState([]);\n//   const [tags, setTags] = useState([]);\n//   const [commentUpdated, updateComments] = useState('');\n//   const [bookmarkModalIsOpen, setBookmarkModalIsOpen] = useState(false);\n//   const cancelAxiosRequest = useRef();\n//   const {\n//     location: {\n//       state: { id: imageID },\n//     },\n//   } = props;\n//   const history = useHistory();\n//   useEffect(() => {\n//     let mounted = true;\n//     const fetchTags = (id) => {\n//       axios({\n//         method: 'GET',\n//         url: 'http://localhost:5000/get_tags',\n//         params: { image_id: id },\n//         cancelToken: new axios.CancelToken(\n//           (c) => (cancelAxiosRequest.current = c)\n//         ),\n//       }).then((res) => {\n//         console.log(res);\n//         if (res.data.result !== false && mounted) {\n//           console.log(res.data.result);\n//           setTags(res.data.result);\n//         } else if (mounted) {\n//           setTags([]);\n//         }\n//       });\n//     };\n//     const fetchComments = (id) => {\n//       axios({\n//         method: 'GET',\n//         url: 'http://localhost:5000/get_comments_to_image',\n//         params: { image_id: id, batch_size: 20 },\n//         cancelToken: new axios.CancelToken(\n//           (c) => (cancelAxiosRequest.current = c)\n//         ),\n//       }).then((res) => {\n//         if (res.data.result !== false && mounted) {\n//           setComments(res.data.result);\n//         } else if (mounted) {\n//           setComments([]);\n//         }\n//         fetchTags(id);\n//       });\n//     };\n//     fetchComments(imageID);\n//     return () => {\n//       console.log('CLEAN UP - PostInfo');\n//       cancelAxiosRequest.current();\n//       mounted = false;\n//     };\n//   }, [commentUpdated, imageID]);\n//   const apiAddPurchase = (imageID) => {\n//     axios({\n//       method: 'POST',\n//       url: 'http://localhost:5000/add_purchase',\n//       params: {\n//         save_for_later: 0,\n//         purchased: 0,\n//         image_id: String(imageID),\n//       },\n//     }).then((response) => {\n//       if (response.data.result !== false) {\n//         console.log(response);\n//       }\n//     });\n//   };\n//   const handleBuyButton = () => {\n//     apiAddPurchase(props.location.state.id);\n//   };\n//   const handleBookmarkClicked = () => {\n//     setBookmarkModalIsOpen(true);\n//   };\n//   if (!openModal) {\n//     return null;\n//   } else {\n//     return ReactDom.createPortal(\n//       <React.Fragment>\n//         <div className=\"photo-overlay-styles\" />\n//         <div className=\"photo-styles\"></div>\n//         <div className=\"postWrapper\">\n//           <div className=\"postInfo\">\n//             <div className=\"username\">\n//               <Button\n//                 varient=\"outlined\"\n//                 onClick={() => {\n//                   history.push({\n//                     pathname: `/profile/${props.location.state.uploader}`,\n//                     state: { uploaderID: props.location.state.uploader },\n//                   });\n//                 }}\n//               >\n//                 @{props.location.state.uploader}\n//               </Button>\n//               <button className=\"btn\">Follow</button>\n//               <Likes\n//                 num_likes={props.location.state.num_likes}\n//                 image_id={props.location.state.id}\n//                 uploader_id={props.location.state.uploader}\n//               />\n//               <IconButton variant=\"contained\" onClick={handleBookmarkClicked}>\n//                 <BookmarkIcon />\n//               </IconButton>\n//             </div>\n//           </div>\n//           <div className=\"postImage\">\n//             <img\n//               src={`data:image/jpg;base64,${props.location.state.url}`}\n//               alt={props.location.state.caption}\n//             />\n//             <div className=\"recImages-nested\">\n//               <h1 className=\"roboto\"> Related Photos:</h1>\n//               <div className=\"recImage\"></div>\n//               <div className=\"recImage\"></div>\n//               <div className=\"recImage\"></div>\n//             </div>\n//           </div>\n//           <div className=\"postFeed-nested\">\n//             <h1>{props.location.state.title}</h1>\n//             <h2 className=\"roboto\">{props.location.state.caption}</h2>\n//             <div className=\"postTags\">\n//               <h2 className=\"roboto\">{props.location.state.caption}</h2>\n//               <h3>\n//                 Tags:{' '}\n//                 {tags.length < 1 ? 'this post has no tags to display' : null}\n//               </h3>\n//               <div className=\"flexbox-tags\">\n//                 {tags.length > 0\n//                   ? tags.map((tag, index) => {\n//                       return (\n//                         <Button key={index} variant=\"contained\">\n//                           #{tag}\n//                         </Button>\n//                       );\n//                     })\n//                   : null}\n//               </div>\n//             </div>\n//             <div className=\"postPrice\">\n//               <h2 className=\"roboto\">Price: ${props.location.state.price}</h2>\n//               <Button variant=\"contained\" onClick={handleBuyButton}>\n//                 Add to Cart\n//               </Button>\n//             </div>\n//             <div className=\"postComments\">\n//               <h2 className=\"roboto\">Comments:</h2>\n//               {/* <Comments className=\"comments\" /> */}\n//               <Comments\n//                 image_id={props.location.state.id}\n//                 comments_list={comments}\n//                 updateComments={updateComments}\n//                 uploader_id={props.location.state.uploader}\n//               />\n//             </div>\n//           </div>\n//         </div>\n//         {bookmarkModalIsOpen ? (\n//           <BookmarkModal\n//             openModal={true}\n//             setOpenModal={setBookmarkModalIsOpen}\n//             photoId={props.location.state.id}\n//           ></BookmarkModal>\n//         ) : null}\n//       </React.Fragment>,\n//       document.getElementById('portal')\n//     );\n//   }\n// }","map":{"version":3,"sources":["/home/cristian/Documents/projects/COMP3900_PhotoPro/capstone-project-comp3900-f11a-2mjec/photopro-app/src/components/Modals/PostModal/PhotoModal.jsx"],"names":[],"mappingssourcesContent":["// import ReactDom from 'react-dom';\n\n// export default function PhotoModal(\n//   { openModal, setOpenModal, photoId },\n//   props\n// ) {\n//   const [comments, setComments] = useState([]);\n//   const [tags, setTags] = useState([]);\n//   const [commentUpdated, updateComments] = useState('');\n//   const [bookmarkModalIsOpen, setBookmarkModalIsOpen] = useState(false);\n//   const cancelAxiosRequest = useRef();\n//   const {\n//     location: {\n//       state: { id: imageID },\n//     },\n//   } = props;\n//   const history = useHistory();\n\n//   useEffect(() => {\n//     let mounted = true;\n\n//     const fetchTags = (id) => {\n//       axios({\n//         method: 'GET',\n//         url: 'http://localhost:5000/get_tags',\n//         params: { image_id: id },\n//         cancelToken: new axios.CancelToken(\n//           (c) => (cancelAxiosRequest.current = c)\n//         ),\n//       }).then((res) => {\n//         console.log(res);\n//         if (res.data.result !== false && mounted) {\n//           console.log(res.data.result);\n//           setTags(res.data.result);\n//         } else if (mounted) {\n//           setTags([]);\n//         }\n//       });\n//     };\n\n//     const fetchComments = (id) => {\n//       axios({\n//         method: 'GET',\n//         url: 'http://localhost:5000/get_comments_to_image',\n//         params: { image_id: id, batch_size: 20 },\n//         cancelToken: new axios.CancelToken(\n//           (c) => (cancelAxiosRequest.current = c)\n//         ),\n//       }).then((res) => {\n//         if (res.data.result !== false && mounted) {\n//           setComments(res.data.result);\n//         } else if (mounted) {\n//           setComments([]);\n//         }\n//         fetchTags(id);\n//       });\n//     };\n//     fetchComments(imageID);\n\n//     return () => {\n//       console.log('CLEAN UP - PostInfo');\n//       cancelAxiosRequest.current();\n//       mounted = false;\n//     };\n//   }, [commentUpdated, imageID]);\n\n//   const apiAddPurchase = (imageID) => {\n//     axios({\n//       method: 'POST',\n//       url: 'http://localhost:5000/add_purchase',\n//       params: {\n//         save_for_later: 0,\n//         purchased: 0,\n//         image_id: String(imageID),\n//       },\n//     }).then((response) => {\n//       if (response.data.result !== false) {\n//         console.log(response);\n//       }\n//     });\n//   };\n\n//   const handleBuyButton = () => {\n//     apiAddPurchase(props.location.state.id);\n//   };\n\n//   const handleBookmarkClicked = () => {\n//     setBookmarkModalIsOpen(true);\n//   };\n\n//   if (!openModal) {\n//     return null;\n//   } else {\n//     return ReactDom.createPortal(\n//       <React.Fragment>\n//         <div className=\"photo-overlay-styles\" />\n//         <div className=\"photo-styles\"></div>\n\n//         <div className=\"postWrapper\">\n//           <div className=\"postInfo\">\n//             <div className=\"username\">\n//               <Button\n//                 varient=\"outlined\"\n//                 onClick={() => {\n//                   history.push({\n//                     pathname: `/profile/${props.location.state.uploader}`,\n//                     state: { uploaderID: props.location.state.uploader },\n//                   });\n//                 }}\n//               >\n//                 @{props.location.state.uploader}\n//               </Button>\n//               <button className=\"btn\">Follow</button>\n//               <Likes\n//                 num_likes={props.location.state.num_likes}\n//                 image_id={props.location.state.id}\n//                 uploader_id={props.location.state.uploader}\n//               />\n//               <IconButton variant=\"contained\" onClick={handleBookmarkClicked}>\n//                 <BookmarkIcon />\n//               </IconButton>\n//             </div>\n//           </div>\n//           <div className=\"postImage\">\n//             <img\n//               src={`data:image/jpg;base64,${props.location.state.url}`}\n//               alt={props.location.state.caption}\n//             />\n//             <div className=\"recImages-nested\">\n//               <h1 className=\"roboto\"> Related Photos:</h1>\n//               <div className=\"recImage\"></div>\n//               <div className=\"recImage\"></div>\n//               <div className=\"recImage\"></div>\n//             </div>\n//           </div>\n//           <div className=\"postFeed-nested\">\n//             <h1>{props.location.state.title}</h1>\n//             <h2 className=\"roboto\">{props.location.state.caption}</h2>\n//             <div className=\"postTags\">\n//               <h2 className=\"roboto\">{props.location.state.caption}</h2>\n//               <h3>\n//                 Tags:{' '}\n//                 {tags.length < 1 ? 'this post has no tags to display' : null}\n//               </h3>\n//               <div className=\"flexbox-tags\">\n//                 {tags.length > 0\n//                   ? tags.map((tag, index) => {\n//                       return (\n//                         <Button key={index} variant=\"contained\">\n//                           #{tag}\n//                         </Button>\n//                       );\n//                     })\n//                   : null}\n//               </div>\n//             </div>\n//             <div className=\"postPrice\">\n//               <h2 className=\"roboto\">Price: ${props.location.state.price}</h2>\n//               <Button variant=\"contained\" onClick={handleBuyButton}>\n//                 Add to Cart\n//               </Button>\n//             </div>\n//             <div className=\"postComments\">\n//               <h2 className=\"roboto\">Comments:</h2>\n//               {/* <Comments className=\"comments\" /> */}\n//               <Comments\n//                 image_id={props.location.state.id}\n//                 comments_list={comments}\n//                 updateComments={updateComments}\n//                 uploader_id={props.location.state.uploader}\n//               />\n//             </div>\n//           </div>\n//         </div>\n//         {bookmarkModalIsOpen ? (\n//           <BookmarkModal\n//             openModal={true}\n//             setOpenModal={setBookmarkModalIsOpen}\n//             photoId={props.location.state.id}\n//           ></BookmarkModal>\n//         ) : null}\n//       </React.Fragment>,\n\n//       document.getElementById('portal')\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}