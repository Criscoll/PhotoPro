{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/COMP3900_PhotoPro/capstone-project-comp3900-f11a-2mjec/photopro-app/src/components/Modals/EditPostModal/textfields/TagsField.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nexport default function TagsField(props) {\n  const [text, setText] = useState(props.oldTags);\n  const [errorText, setErrorText] = useState('');\n  const [errorValue, setErrorValue] = useState(false);\n  const [firstRender, setFirstRender] = useState(true);\n  const textFieldRef = useRef();\n  const {\n    saveButtonClicked\n  } = props;\n  useEffect(() => {\n    setFirstRender(false);\n    props.setTagsValidated([false, text]);\n  }, []);\n  useEffect(() => {\n    console.log(`in use effect with props.oldtags ${props.oldTags}`);\n    setText(props.oldTags);\n    props.setTagsValidated([false, props.oldTags]);\n    console.log(textFieldRef.current.defaultValue);\n  }, [props.oldTags]);\n  useEffect(() => {\n    if (firstRender === false) {\n      const result = handleTagsInput(text);\n      props.setTagsValidated([result, text]);\n    }\n  }, [saveButtonClicked]);\n\n  const handleTagsInput = text => {\n    if (text.length < 100) {\n      setErrorValue(false);\n      return true;\n    } else {\n      setErrorValue(true);\n      setErrorText('Too many tags');\n      return false;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Tags\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    ref: textFieldRef,\n    error: errorValue,\n    helperText: errorText,\n    onChange: e => {\n      setText(e.target.value);\n      handleTagsInput(e.target.value);\n    },\n    value: text,\n    id: \"outlined-required\",\n    label: \"Tags must be comma seperated\",\n    defaultValue: props.oldTags.toString(),\n    variant: \"outlined\",\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/COMP3900_PhotoPro/capstone-project-comp3900-f11a-2mjec/photopro-app/src/components/Modals/EditPostModal/textfields/TagsField.jsx"],"names":["React","useState","useEffect","useRef","TextField","TagsField","props","text","setText","oldTags","errorText","setErrorText","errorValue","setErrorValue","firstRender","setFirstRender","textFieldRef","saveButtonClicked","setTagsValidated","console","log","current","defaultValue","result","handleTagsInput","length","e","target","value","toString","shrink"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACvC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACK,KAAK,CAACG,OAAP,CAAhC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAMe,YAAY,GAAGb,MAAM,EAA3B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAwBX,KAA9B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAT,IAAAA,KAAK,CAACY,gBAAN,CAAuB,CAAC,KAAD,EAAQX,IAAR,CAAvB;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAL,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,OAAO,CAACC,GAAR,CAAa,oCAAmCd,KAAK,CAACG,OAAQ,EAA9D;AACAD,IAAAA,OAAO,CAACF,KAAK,CAACG,OAAP,CAAP;AACAH,IAAAA,KAAK,CAACY,gBAAN,CAAuB,CAAC,KAAD,EAAQZ,KAAK,CAACG,OAAd,CAAvB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAY,CAACK,OAAb,CAAqBC,YAAjC;AACD,GALQ,EAKN,CAAChB,KAAK,CAACG,OAAP,CALM,CAAT;AAOAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,WAAW,KAAK,KAApB,EAA2B;AACzB,YAAMS,MAAM,GAAGC,eAAe,CAACjB,IAAD,CAA9B;AACAD,MAAAA,KAAK,CAACY,gBAAN,CAAuB,CAACK,MAAD,EAAShB,IAAT,CAAvB;AACD;AACF,GALQ,EAKN,CAACU,iBAAD,CALM,CAAT;;AAOA,QAAMO,eAAe,GAAIjB,IAAD,IAAU;AAChC,QAAIA,IAAI,CAACkB,MAAL,GAAc,GAAlB,EAAuB;AACrBZ,MAAAA,aAAa,CAAC,KAAD,CAAb;AACA,aAAO,IAAP;AACD,KAHD,MAGO;AACLA,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAF,MAAAA,YAAY,CAAC,eAAD,CAAZ;AACA,aAAO,KAAP;AACD;AACF,GATD;;AAWA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,GAAG,EAAEK,YADP;AAEE,IAAA,KAAK,EAAEJ,UAFT;AAGE,IAAA,UAAU,EAAEF,SAHd;AAIE,IAAA,QAAQ,EAAGgB,CAAD,IAAO;AACflB,MAAAA,OAAO,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACAJ,MAAAA,eAAe,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACD,KAPH;AAQE,IAAA,KAAK,EAAErB,IART;AASE,IAAA,EAAE,EAAC,mBATL;AAUE,IAAA,KAAK,EAAC,8BAVR;AAWE,IAAA,YAAY,EAAED,KAAK,CAACG,OAAN,CAAcoB,QAAd,EAXhB;AAYE,IAAA,OAAO,EAAC,UAZV;AAaE,IAAA,eAAe,EAAE;AACfC,MAAAA,MAAM,EAAE;AADO,KAbnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAwBD","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function TagsField(props) {\n  const [text, setText] = useState(props.oldTags);\n  const [errorText, setErrorText] = useState('');\n  const [errorValue, setErrorValue] = useState(false);\n  const [firstRender, setFirstRender] = useState(true);\n  const textFieldRef = useRef();\n  const { saveButtonClicked } = props;\n\n  useEffect(() => {\n    setFirstRender(false);\n    props.setTagsValidated([false, text]);\n  }, []);\n\n  useEffect(() => {\n    console.log(`in use effect with props.oldtags ${props.oldTags}`);\n    setText(props.oldTags);\n    props.setTagsValidated([false, props.oldTags]);\n    console.log(textFieldRef.current.defaultValue);\n  }, [props.oldTags]);\n\n  useEffect(() => {\n    if (firstRender === false) {\n      const result = handleTagsInput(text);\n      props.setTagsValidated([result, text]);\n    }\n  }, [saveButtonClicked]);\n\n  const handleTagsInput = (text) => {\n    if (text.length < 100) {\n      setErrorValue(false);\n      return true;\n    } else {\n      setErrorValue(true);\n      setErrorText('Too many tags');\n      return false;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <h3>Tags</h3>\n      <div>\n        <TextField\n          ref={textFieldRef}\n          error={errorValue}\n          helperText={errorText}\n          onChange={(e) => {\n            setText(e.target.value);\n            handleTagsInput(e.target.value);\n          }}\n          value={text}\n          id=\"outlined-required\"\n          label=\"Tags must be comma seperated\"\n          defaultValue={props.oldTags.toString()}\n          variant=\"outlined\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}