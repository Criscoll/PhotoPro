{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/COMP3900_PhotoPro/capstone-project-comp3900-f11a-2mjec/photopro-app/src/components/userPhotos/UserPhotos.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst UserPhotos = () => {\n  const [imgs, setImgs] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [photoIdBookmarked, setPhotoIdBookmarked] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const observer = useRef();\n  const lastImageRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        fetchImages(props.query);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, hasMore]);\n  useEffect(() => {\n    setImgs([]);\n    setHasMore(false);\n    fetchImages(props.query);\n  }, [props.query]);\n\n  const fetchImages = term => {\n    setLoading(true);\n    axios({\n      method: 'GET',\n      url: 'http://localhost:5000/profile_photos',\n      params: {\n        batch_size: 30\n      } //user_id: 1\n\n    }).then(res => {\n      console.log(res);\n\n      if (res.data.result != false) {\n        setHasMore(true);\n        setTimeout(() => {\n          setLoading(false);\n          setImgs(prevImgs => {\n            return [...prevImgs, ...res.data.result];\n          });\n        }, 500);\n      } else {\n        console.log('no more images to return');\n        setLoading(false);\n        setHasMore(false); // setImgs((prevImgs) => {\n        //   return [...prevImgs];\n        // });\n      }\n    });\n  };\n\n  const requestProfileImages = async function () {\n    const response = await axios.get('http://localhost:5000/profile_photos', {\n      params: {\n        batch_size: 30\n      }\n    }).then(response => {\n      if (response.data.result !== false) {\n        console.log(response);\n        setImgs(response.data.result);\n      }\n    });\n  };\n\n  console.log(`LENGTH = ${imgs.length}`);\n  console.log(`HASMORE = ${hasMore}`);\n  console.log(`LOADING = ${loading}`);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"Found Images: \", imgs.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, imgs.map((image, index) => {\n    if (image === null) {\n      return null;\n    }\n\n    if (imgs.length === index + 1) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ImageCard, {\n        key: image.id,\n        image: image,\n        openBookmarkModal: modalIsOpen,\n        setOpenBookmarkModal: setModalIsOpen,\n        setPhotoId: setPhotoIdBookmarked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        ref: lastImageRef,\n        style: {\n          position: 'relative',\n          bottom: '200px',\n          // border: '3px solid red',\n          height: '0%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(ImageCard, {\n        key: image.id,\n        image: image,\n        openBookmarkModal: modalIsOpen,\n        setOpenBookmarkModal: setModalIsOpen,\n        setPhotoId: setPhotoIdBookmarked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      });\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, loading && 'Loading...'), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, !hasMore && 'No more images to display'), /*#__PURE__*/React.createElement(BookmarkModal, {\n    openModal: modalIsOpen,\n    onCloseModal: () => setModalIsOpen(false),\n    photoId: photoIdBookmarked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Feed;","map":{"version":3,"sources":["/home/cristian/Documents/projects/COMP3900_PhotoPro/capstone-project-comp3900-f11a-2mjec/photopro-app/src/components/userPhotos/UserPhotos.jsx"],"names":["React","useState","useEffect","axios","UserPhotos","imgs","setImgs","modalIsOpen","setModalIsOpen","photoIdBookmarked","setPhotoIdBookmarked","hasMore","setHasMore","loading","setLoading","observer","useRef","lastImageRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","fetchImages","props","query","observe","term","method","url","params","batch_size","then","res","console","log","data","result","setTimeout","prevImgs","requestProfileImages","response","get","length","map","image","index","id","position","bottom","height","textAlign","Feed"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst UserPhotos = () => {\n  const [imgs, setImgs] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [photoIdBookmarked, setPhotoIdBookmarked] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const observer = useRef();\n  const lastImageRef = useCallback(\n    (node) => {\n      if (loading) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && hasMore) {\n          fetchImages(props.query);\n        }\n      });\n\n      if (node) observer.current.observe(node);\n    },\n    [loading, hasMore]\n  );\n\n  useEffect(() => {\n    setImgs([]);\n    setHasMore(false);\n    fetchImages(props.query);\n  }, [props.query]);\n\n  const fetchImages = (term) => {\n    setLoading(true);\n\n    axios({\n      method: 'GET',\n      url: 'http://localhost:5000/profile_photos',\n      params: { batch_size: 30 }, //user_id: 1\n    }).then((res) => {\n      console.log(res);\n      if (res.data.result != false) {\n        setHasMore(true);\n        setTimeout(() => {\n          setLoading(false);\n          setImgs((prevImgs) => {\n            return [...prevImgs, ...res.data.result];\n          });\n        }, 500);\n      } else {\n        console.log('no more images to return');\n        setLoading(false);\n        setHasMore(false);\n        // setImgs((prevImgs) => {\n        //   return [...prevImgs];\n        // });\n      }\n    });\n  };\n\n  const requestProfileImages = async function () {\n    const response = await axios\n      .get('http://localhost:5000/profile_photos', {\n        params: { batch_size: 30 },\n      })\n      .then((response) => {\n        if (response.data.result !== false) {\n          console.log(response);\n          setImgs(response.data.result);\n        }\n      });\n  };\n\n  console.log(`LENGTH = ${imgs.length}`);\n  console.log(`HASMORE = ${hasMore}`);\n  console.log(`LOADING = ${loading}`);\n\n  return (\n    <React.Fragment>\n      <h2>Found Images: {imgs.length}</h2>\n\n      <div className=\"image-grid\">\n        {imgs.map((image, index) => {\n          if (image === null) {\n            return null;\n          }\n\n          if (imgs.length === index + 1) {\n            return (\n              <React.Fragment key={index}>\n                <ImageCard\n                  key={image.id}\n                  image={image}\n                  openBookmarkModal={modalIsOpen}\n                  setOpenBookmarkModal={setModalIsOpen}\n                  setPhotoId={setPhotoIdBookmarked}\n                />\n                <div\n                  key={index}\n                  ref={lastImageRef}\n                  style={{\n                    position: 'relative',\n                    bottom: '200px',\n                    // border: '3px solid red',\n                    height: '0%',\n                  }}\n                ></div>\n              </React.Fragment>\n            );\n          } else {\n            return (\n              <ImageCard\n                key={image.id}\n                image={image}\n                openBookmarkModal={modalIsOpen}\n                setOpenBookmarkModal={setModalIsOpen}\n                setPhotoId={setPhotoIdBookmarked}\n              />\n            );\n          }\n        })}\n      </div>\n      <h2 style={{ textAlign: 'center' }}>{loading && 'Loading...'}</h2>\n      <h2 style={{ textAlign: 'center' }}>\n        {!hasMore && 'No more images to display'}\n      </h2>\n\n      <BookmarkModal\n        openModal={modalIsOpen}\n        onCloseModal={() => setModalIsOpen(false)}\n        photoId={photoIdBookmarked}\n      ></BookmarkModal>\n    </React.Fragment>\n  );\n};\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}