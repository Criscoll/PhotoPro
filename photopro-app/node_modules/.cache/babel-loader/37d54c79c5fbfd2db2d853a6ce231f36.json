{"ast":null,"code":"import { CameraType } from './Camera.types';\nimport { canGetUserMedia, isBackCameraAvailableAsync, isFrontCameraAvailableAsync } from './WebUserMediaManager';\nexport default {\n  get name() {\n    return 'ExponentCameraManager';\n  },\n\n  get Type() {\n    return {\n      back: 'back',\n      front: 'front'\n    };\n  },\n\n  get FlashMode() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      torch: 'torch'\n    };\n  },\n\n  get AutoFocus() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      singleShot: 'singleShot'\n    };\n  },\n\n  get WhiteBalance() {\n    return {\n      auto: 'auto',\n      continuous: 'continuous',\n      manual: 'manual'\n    };\n  },\n\n  get VideoQuality() {\n    return {};\n  },\n\n  async isAvailableAsync() {\n    return canGetUserMedia();\n  },\n\n  async takePicture(options, camera) {\n    return await camera.takePicture(options);\n  },\n\n  async pausePreview(camera) {\n    await camera.pausePreview();\n  },\n\n  async resumePreview(camera) {\n    return await camera.resumePreview();\n  },\n\n  async getAvailableCameraTypesAsync() {\n    if (!canGetUserMedia() || !navigator.mediaDevices.enumerateDevices) return [];\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    const types = await Promise.all([(await isFrontCameraAvailableAsync(devices)) && CameraType.front, (await isBackCameraAvailableAsync()) && CameraType.back]);\n    return types.filter(Boolean);\n  },\n\n  async getAvailablePictureSizes(ratio, camera) {\n    return await camera.getAvailablePictureSizes(ratio);\n  }\n\n};","map":{"version":3,"sources":["../src/ExponentCameraManager.web.ts"],"names":[],"mappings":"AAAA,SAAsD,UAAtD,QAAwE,gBAAxE;AAEA,SACE,eADF,EAEE,0BAFF,EAGE,2BAHF,QAIO,uBAJP;AAMA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,uBAAP;AACD,GAHY;;AAIb,MAAI,IAAJ,GAAQ;AACN,WAAO;AACL,MAAA,IAAI,EAAE,MADD;AAEL,MAAA,KAAK,EAAE;AAFF,KAAP;AAID,GATY;;AAUb,MAAI,SAAJ,GAAa;AACX,WAAO;AACL,MAAA,EAAE,EAAE,IADC;AAEL,MAAA,GAAG,EAAE,KAFA;AAGL,MAAA,IAAI,EAAE,MAHD;AAIL,MAAA,KAAK,EAAE;AAJF,KAAP;AAMD,GAjBY;;AAkBb,MAAI,SAAJ,GAAa;AACX,WAAO;AACL,MAAA,EAAE,EAAE,IADC;AAEL,MAAA,GAAG,EAAE,KAFA;AAGL,MAAA,IAAI,EAAE,MAHD;AAIL,MAAA,UAAU,EAAE;AAJP,KAAP;AAMD,GAzBY;;AA0Bb,MAAI,YAAJ,GAAgB;AACd,WAAO;AACL,MAAA,IAAI,EAAE,MADD;AAEL,MAAA,UAAU,EAAE,YAFP;AAGL,MAAA,MAAM,EAAE;AAHH,KAAP;AAKD,GAhCY;;AAiCb,MAAI,YAAJ,GAAgB;AACd,WAAO,EAAP;AACD,GAnCY;;AAoCb,QAAM,gBAAN,GAAsB;AACpB,WAAO,eAAe,EAAtB;AACD,GAtCY;;AAuCb,QAAM,WAAN,CACE,OADF,EAEE,MAFF,EAE2B;AAEzB,WAAO,MAAM,MAAM,CAAC,WAAP,CAAmB,OAAnB,CAAb;AACD,GA5CY;;AA6Cb,QAAM,YAAN,CAAmB,MAAnB,EAA4C;AAC1C,UAAM,MAAM,CAAC,YAAP,EAAN;AACD,GA/CY;;AAgDb,QAAM,aAAN,CAAoB,MAApB,EAA6C;AAC3C,WAAO,MAAM,MAAM,CAAC,aAAP,EAAb;AACD,GAlDY;;AAmDb,QAAM,4BAAN,GAAkC;AAChC,QAAI,CAAC,eAAe,EAAhB,IAAsB,CAAC,SAAS,CAAC,YAAV,CAAuB,gBAAlD,EAAoE,OAAO,EAAP;AAEpE,UAAM,OAAO,GAAG,MAAM,SAAS,CAAC,YAAV,CAAuB,gBAAvB,EAAtB;AAEA,UAAM,KAAK,GAAsB,MAAM,OAAO,CAAC,GAAR,CAAY,CACjD,CAAC,MAAM,2BAA2B,CAAC,OAAD,CAAlC,KAAgD,UAAU,CAAC,KADV,EAEjD,CAAC,MAAM,0BAA0B,EAAjC,KAAwC,UAAU,CAAC,IAFF,CAAZ,CAAvC;AAKA,WAAO,KAAK,CAAC,MAAN,CAAa,OAAb,CAAP;AACD,GA9DY;;AA+Db,QAAM,wBAAN,CAA+B,KAA/B,EAA8C,MAA9C,EAAuE;AACrE,WAAO,MAAM,MAAM,CAAC,wBAAP,CAAgC,KAAhC,CAAb;AACD;;AAjEY,CAAf","sourcesContent":["import { CameraCapturedPicture, CameraPictureOptions, CameraType } from './Camera.types';\nimport { ExponentCameraRef } from './ExponentCamera.web';\nimport {\n  canGetUserMedia,\n  isBackCameraAvailableAsync,\n  isFrontCameraAvailableAsync,\n} from './WebUserMediaManager';\n\nexport default {\n  get name(): string {\n    return 'ExponentCameraManager';\n  },\n  get Type() {\n    return {\n      back: 'back',\n      front: 'front',\n    };\n  },\n  get FlashMode() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      torch: 'torch',\n    };\n  },\n  get AutoFocus() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      singleShot: 'singleShot',\n    };\n  },\n  get WhiteBalance() {\n    return {\n      auto: 'auto',\n      continuous: 'continuous',\n      manual: 'manual',\n    };\n  },\n  get VideoQuality() {\n    return {};\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    return canGetUserMedia();\n  },\n  async takePicture(\n    options: CameraPictureOptions,\n    camera: ExponentCameraRef\n  ): Promise<CameraCapturedPicture> {\n    return await camera.takePicture(options);\n  },\n  async pausePreview(camera: ExponentCameraRef): Promise<void> {\n    await camera.pausePreview();\n  },\n  async resumePreview(camera: ExponentCameraRef): Promise<void> {\n    return await camera.resumePreview();\n  },\n  async getAvailableCameraTypesAsync(): Promise<string[]> {\n    if (!canGetUserMedia() || !navigator.mediaDevices.enumerateDevices) return [];\n\n    const devices = await navigator.mediaDevices.enumerateDevices();\n\n    const types: (string | null)[] = await Promise.all([\n      (await isFrontCameraAvailableAsync(devices)) && CameraType.front,\n      (await isBackCameraAvailableAsync()) && CameraType.back,\n    ]);\n\n    return types.filter(Boolean) as string[];\n  },\n  async getAvailablePictureSizes(ratio: string, camera: ExponentCameraRef): Promise<string[]> {\n    return await camera.getAvailablePictureSizes(ratio);\n  },\n\n  // TODO(Bacon): Is video possible?\n  // record(options): Promise\n  // stopRecording(): Promise<void>\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}