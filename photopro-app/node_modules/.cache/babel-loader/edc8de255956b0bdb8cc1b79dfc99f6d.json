{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/COMP3900_PhotoPro/capstone-project-comp3900-f11a-2mjec/photopro-app/src/components/feed/feed.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport './feed.css';\nimport axios from 'axios';\nimport ImageCard from './ImageCard/ImageCard';\nimport BookmarkModal from '../modal/BookmarkModal';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { ImageSearch } from '@material-ui/icons';\n\nconst fetchImages = (term, setImgs, setHasMore) => {\n  axios({\n    method: 'GET',\n    url: 'http://localhost:5000/discovery',\n    params: {\n      query: term,\n      batch_size: 20\n    } //user_id: 1\n\n  }).then(res => {\n    if (res.data.result != false) {\n      setHasMore(true);\n      setTimeout(() => {\n        setImgs(prevImgs => {\n          return [...prevImgs, ...res.data.result];\n        });\n      }, 500); // setImgs(imgs.concat(res.data.result));\n    } else {\n      console.log('no more images to return');\n      setHasMore(false); // setImgs((prevImgs) => {\n      //   return [...prevImgs];\n      // });\n    }\n  });\n};\n\nconst Feed = props => {\n  const [imgs, setImgs] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [photoIdBookmarked, setPhotoIdBookmarked] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  useEffect(() => {\n    setImgs([]);\n    setHasMore(false);\n  }, [props.query]);\n  console.log(`LENGTH = ${imgs.length}`);\n  console.log(`HASMORE = ${hasMore}`);\n  let images = null;\n\n  if (imgs != null) {\n    images = imgs.map(img => {\n      return /*#__PURE__*/React.createElement(ImageCard, {\n        key: img.id,\n        image: img,\n        openBookmarkModal: modalIsOpen,\n        setOpenBookmarkModal: setModalIsOpen,\n        setPhotoId: setPhotoIdBookmarked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Found Images: \", imgs.length), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"scrollableDiv\",\n    style: {\n      height: '80ch',\n      overflow: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: imgs.length,\n    next: fetchImages(props.query, setImgs, setHasMore),\n    hasMore: hasMore,\n    loader: 'Loading...',\n    scrollThreshold: \"500px\",\n    scrollableTarget: \"scrollableDiv\",\n    endMessage: /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }, \"Yay! You have seen it all\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, images))), /*#__PURE__*/React.createElement(BookmarkModal, {\n    openModal: modalIsOpen,\n    onCloseModal: () => setModalIsOpen(false),\n    photoId: photoIdBookmarked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Feed;","map":{"version":3,"sources":["/home/cristian/Documents/projects/COMP3900_PhotoPro/capstone-project-comp3900-f11a-2mjec/photopro-app/src/components/feed/feed.jsx"],"names":["React","useState","useEffect","axios","ImageCard","BookmarkModal","InfiniteScroll","ImageSearch","fetchImages","term","setImgs","setHasMore","method","url","params","query","batch_size","then","res","data","result","setTimeout","prevImgs","console","log","Feed","props","imgs","modalIsOpen","setModalIsOpen","photoIdBookmarked","setPhotoIdBookmarked","hasMore","length","images","map","img","id","height","overflow","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './feed.css';\nimport axios from 'axios';\nimport ImageCard from './ImageCard/ImageCard';\nimport BookmarkModal from '../modal/BookmarkModal';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { ImageSearch } from '@material-ui/icons';\n\nconst fetchImages = (term, setImgs, setHasMore) => {\n  axios({\n    method: 'GET',\n    url: 'http://localhost:5000/discovery',\n    params: { query: term, batch_size: 20 }, //user_id: 1\n  }).then((res) => {\n    if (res.data.result != false) {\n      setHasMore(true);\n      setTimeout(() => {\n        setImgs((prevImgs) => {\n          return [...prevImgs, ...res.data.result];\n        });\n      }, 500);\n\n      // setImgs(imgs.concat(res.data.result));\n    } else {\n      console.log('no more images to return');\n      setHasMore(false);\n      // setImgs((prevImgs) => {\n      //   return [...prevImgs];\n      // });\n    }\n  });\n};\n\nconst Feed = (props) => {\n  const [imgs, setImgs] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [photoIdBookmarked, setPhotoIdBookmarked] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  useEffect(() => {\n    setImgs([]);\n    setHasMore(false);\n  }, [props.query]);\n\n  console.log(`LENGTH = ${imgs.length}`);\n  console.log(`HASMORE = ${hasMore}`);\n\n  let images = null;\n  if (imgs != null) {\n    images = imgs.map((img) => {\n      return (\n        <ImageCard\n          key={img.id}\n          image={img}\n          openBookmarkModal={modalIsOpen}\n          setOpenBookmarkModal={setModalIsOpen}\n          setPhotoId={setPhotoIdBookmarked}\n        />\n      );\n    });\n  }\n\n  return (\n    <React.Fragment>\n      <h2>Found Images: {imgs.length}</h2>\n      <div id=\"scrollableDiv\" style={{ height: '80ch', overflow: 'auto' }}>\n        <InfiniteScroll\n          dataLength={imgs.length}\n          next={fetchImages(props.query, setImgs, setHasMore)}\n          hasMore={hasMore}\n          loader={'Loading...'}\n          scrollThreshold=\"500px\"\n          scrollableTarget=\"scrollableDiv\"\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>Yay! You have seen it all</b>\n            </p>\n          }\n        >\n          <div className=\"image-list\">{images}</div>\n        </InfiniteScroll>\n      </div>\n      <BookmarkModal\n        openModal={modalIsOpen}\n        onCloseModal={() => setModalIsOpen(false)}\n        photoId={photoIdBookmarked}\n      ></BookmarkModal>\n    </React.Fragment>\n  );\n};\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}